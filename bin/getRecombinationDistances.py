
import sys, argparse, glob, multiprocessing, os, pickle, gzip, pysam
from tom import brace, bootstrap_sample
from tom_slim import slim, slim_reader, slim_reader_gzip
import pandas as pd, numpy as np

def sanity_checks(x):
	if x==None:
		print("file number " + str(number) + " was unable to be converted into a slim object")
		return "insane"
	if not x.sanity:
		return "insane"
	elif x.slim_sanity_test():
		return "sane"

	elif x.mutations:
		return "insane"
	else:
		print("file number " + str(number) + " was iffy 2" )
		return "insane"

def get_closest(array, value):
    #make sure array is a numpy array
    array = np.array(array)

    # get insert positions
    idxs = np.searchsorted(array, value, side="right")

    # find indexes where previous index is closer
#    prev_idx_is_less = ((idxs == len(array))|(np.fabs(values - array[np.maximum(idxs-1, 0)]) < np.fabs(values - array[np.minimum(idxs, len(array)-1)])))
#idxs[prev_idx_is_less] -= 1

    return array[idxs]


def recombination_rates(rec, start, stop):
	
	starters =  rec[(rec['pos'] >= start) & (rec['pos'] <= stop)].copy()
	if len(starters) == 0 or len(starters) == 1 and starters['rate'][0] == -99:
		indexClose = np.searchsorted(np.array(rec['pos']), stop, side="right")
		rate = list(rec.loc[[indexClose]]['rate'])[0]
		rho_dist = (stop - start) * rate
		freq_mean = rate
		
	else:	
		if start == starters['pos'].min():pass
		elif start < starters['pos'].min():
			recRef = float(starters.head(1)['rate'])
			starters.loc[-1] = [start, recRef]  # adding a row
			starters.index = starters.index + 1  # shifting index
			rec.index = rec.index + 1  # shifting index
			starters = starters.sort_index()  # sorting by index
		elif start > starters['pos'].min():
			print 'BROKEN'
			if stop == starters['pos'].max():pass

		if stop > starters['pos'].max():
			subRec = rec.loc[[ starters.tail(1).index[0] + 1 ]]['rate'] ## The rate in the next interval
			starters.loc[-1] = [stop, subRec]  # adding a row
		elif stop < starters['pos'].max():
			print 'BROKEN'
		elif stop == starters['pos'].max():pass
		print starters
	
		starters['cumulative'] = starters['rate']* ( starters['pos'] - starters['pos'].shift(1))
		rho_dist = starters['cumulative'].sum()  ## Change 4000 to 4*Ne
		freq_mean = rho_dist/ (starters['pos'].max() - starters['pos'].min())
	return 4000* rho_dist, 4000*freq_mean


def main(recom):
	number_of_slims = 0
	reader = slim_reader_gzip


	rec = pd.DataFrame( [[1,-99]] + recom , columns = ['pos','rate'])
#	rec['cumulative'] = rec['rate']* ( rec['pos'] - rec['pos'].shift(1))
#	freq_mean = 4000. * rec['cumulative'].sum() / rec['pos'].max()
	
	interval = [[173800, 193200] , [1,428]]
	for i in interval:
		print recombination_rates(rec, i[0], i[1])


	sys.exit()

	for i in reader(sys.argv[1]):
		x = slim(i)
		check_point = sanity_checks(x)
		if check_point == "insane":
			continue
		else:
			pass
		print x.recomb_intervals
		recombination = pd.DataFrame( [[1,-99]] + x.recomb_intervals , columns = ['pos','rate'])
		recombination['cumulative'] = recombination['rate']* ( recombination['pos'] - recombination['pos'].shift(1))
		freq_mean = 4. * x.N * recombination['cumulative'].sum() / recombination['pos'].max()
		break
	















recom = [[4287.0, 4.23325e-07], [11096.0, 4.236e-07], [11144.0, 3.42575e-07], [11237.0, 2.131775e-07], [11276.0, 1.360325e-07], [11280.0, 1.0977e-07], [11286.0, 8.3785e-08], [11310.0, 7.47775e-08], [11339.0, 5.625e-08], [11361.0, 3.9825e-08], [19658.0, 3.86775e-08], [19663.0, 3.205e-07], [19667.0, 1.0287e-06], [19708.0, 1.6046e-06], [19722.0, 1.70885e-06], [19743.0, 1.71505e-06], [21921.0, 1.716925e-06], [21972.0, 5.28775e-07], [22098.0, 1.978025e-07], [22100.0, 1.4245e-07], [22113.0, 1.009125e-07], [22133.0, 8.7635e-08], [25048.0, 8.253e-08], [25117.0, 1.00605e-05], [25792.0, 1.3425e-05], [30504.0, 1.8344e-06], [30521.0, 1.708475e-06], [30538.0, 1.53405e-06], [30546.0, 2.2557e-07], [30554.0, 1.429375e-07], [40161.0, 1.232875e-07], [40168.0, 1.4395e-07], [40180.0, 1.852875e-07], [40224.0, 2.728e-07], [40266.0, 3.34775e-07], [40296.0, 4.37675e-07], [40319.0, 4.97625e-07], [40349.0, 5.538e-07], [40533.0, 5.899e-07], [63570.0, 5.89975e-07], [63678.0, 5.73575e-07], [63723.0, 5.4255e-07], [63726.0, 5.23525e-07], [63789.0, 4.7215e-07], [63820.0, 4.35325e-07], [63851.0, 3.84725e-07], [63899.0, 3.58625e-07], [63961.0, 3.3315e-07], [63982.0, 3.1995e-07], [64076.0, 2.9635e-07], [64137.0, 2.7655e-07], [64161.0, 2.76425e-07], [64276.0, 2.66475e-07], [64423.0, 2.654e-07], [64502.0, 2.43065e-07], [64511.0, 2.237075e-07], [64528.0, 1.77775e-07], [64677.0, 1.58045e-07], [64807.0, 1.284425e-07], [64870.0, 1.2005e-07], [64885.0, 1.1753e-07], [65054.0, 1.148425e-07], [65060.0, 1.142075e-07], [86163.0, 1.10425e-07], [86237.0, 1.50375e-07], [86338.0, 2.74925e-07], [86362.0, 6.31025e-06], [86377.0, 6.62475e-06], [86604.0, 6.869e-06], [86623.0, 1.490725e-06], [86788.0, 3.74775e-07], [86830.0, 3.3665e-07], [86846.0, 3.13425e-07], [98660.0, 3.0735e-07], [98688.0, 3.25525e-07], [98724.0, 3.74125e-07], [98732.0, 4.11375e-07], [98746.0, 4.60225e-07], [98757.0, 5.1045e-07], [98818.0, 5.4295e-07], [98853.0, 5.61325e-07], [98878.0, 5.7415e-07], [98889.0, 6.2905e-07], [98895.0, 7.37925e-07], [98906.0, 8.27e-07], [98907.0, 8.71325e-07], [98910.0, 1.024075e-06], [98963.0, 1.099025e-06], [99036.0, 1.154625e-06], [99097.0, 1.2078e-06], [99100.0, 1.22435e-06], [99109.0, 1.23135e-06], [99117.0, 1.249875e-06], [99139.0, 1.260225e-06], [99173.0, 1.26175e-06], [100575.0, 1.265075e-06], [100591.0, 1.2705e-06], [100610.0, 1.27105e-06], [100668.0, 1.2832e-06], [100722.0, 1.467275e-06], [100725.0, 1.474975e-06], [100762.0, 1.757075e-06], [100774.0, 1.776175e-06], [100794.0, 1.796e-06], [100809.0, 1.810725e-06], [100859.0, 1.826725e-06], [100980.0, 1.852275e-06], [101015.0, 1.9171e-06], [101047.0, 2.003325e-06], [107331.0, 2.0124e-06], [107373.0, 1.99595e-06], [107389.0, 1.739975e-06], [107405.0, 1.52365e-06], [107498.0, 1.370125e-06], [107514.0, 1.36655e-06], [107565.0, 1.174375e-06], [107688.0, 1.1343e-07], [110275.0, 9.608e-08], [110299.0, 1.098425e-07], [110347.0, 1.96495e-07], [110363.0, 5.56775e-07], [110366.0, 8.3135e-07], [110371.0, 1.193925e-06], [117800.0, 1.50035e-06], [118627.0, 0.0001853025], [118631.0, 0.0001841425], [119763.0, 8.0435e-07], [119773.0, 8.03925e-07], [119808.0, 7.9595e-07], [119835.0, 7.522e-07], [119842.0, 4.24325e-07], [119856.0, 8.96125e-08], [131165.0, 2.13025e-08], [131204.0, 3.7235e-08], [131229.0, 1.326675e-07], [131244.0, 2.4229e-07], [131259.0, 4.54775e-07], [131261.0, 6.61475e-07], [131289.0, 7.68225e-07], [131313.0, 7.83725e-07], [131339.0, 8.04425e-07], [131345.0, 8.1005e-07], [131370.0, 8.1165e-07], [149738.0, 8.1385e-07], [149759.0, 2.14895e-06], [149777.0, 9.166e-06], [149786.0, 9.326e-06], [150047.0, 9.80175e-06], [150280.0, 2.5005e-06], [150310.0, 2.49135e-06], [150316.0, 1.966825e-06], [150323.0, 1.1548e-06], [150350.0, 5.04675e-07], [150374.0, 1.55395e-07], [157149.0, 1.269e-07], [157168.0, 1.2876e-07], [157199.0, 1.288925e-07], [157200.0, 1.340125e-07], [157205.0, 1.37135e-07], [157298.0, 1.40365e-07], [157430.0, 1.519075e-07], [157433.0, 1.77265e-07], [157626.0, 2.114425e-07], [157649.0, 2.599e-07], [157672.0, 2.8665e-07], [157715.0, 3.158e-07], [157725.0, 3.51525e-07], [157728.0, 3.87075e-07], [157766.0, 4.086e-07], [157797.0, 4.298e-07], [157801.0, 4.4955e-07], [157850.0, 4.65625e-07], [157860.0, 4.77e-07], [157884.0, 4.89325e-07], [157896.0, 4.952e-07], [157911.0, 4.99575e-07], [157928.0, 5.0105e-07], [157930.0, 5.028e-07], [157935.0, 5.073e-07], [157983.0, 5.0735e-07], [158024.0, 5.095e-07], [158033.0, 5.1255e-07], [158043.0, 5.129e-07], [158123.0, 5.131e-07], [158134.0, 5.13375e-07], [158220.0, 5.14275e-07], [173458.0, 5.14525e-07], [173563.0, 5.10875e-07], [173570.0, 4.31375e-07], [173616.0, 3.7515e-07], [173620.0, 2.893e-07], [173645.0, 1.730225e-07], [173687.0, 1.141525e-07], [173743.0, 7.316e-08], [174092.0, 3.73975e-08], [174448.0, 3.399e-08], [174458.0, 2.450475e-08], [174502.0, 2.285875e-08], [174526.0, 1.895825e-08], [174583.0, 1.8562e-08], [174613.0, 1.7435e-08], [183252.0, 1.487075e-08], [183253.0, 1.25015e-07], [183265.0, 1.76615e-07], [183278.0, 2.078925e-07], [183318.0, 2.73375e-07], [183332.0, 3.17825e-07], [183404.0, 3.35075e-07], [183445.0, 4.005e-07], [193053.0, 4.30575e-07], [193061.0, 4.49475e-07], [193062.0, 4.75775e-07], [193089.0, 4.89225e-07], [193090.0, 6.56225e-07], [193096.0, 8.446e-07], [193108.0, 9.426e-07], [193120.0, 1.368025e-06], [193169.0, 1.908525e-06], [193178.0, 1.942675e-06], [193247.0, 1.943375e-06], [193265.0, 2.377725e-06], [194068.0, 2.66725e-06], [194086.0, 2.40725e-06], [194096.0, 1.655075e-06], [194113.0, 6.1935e-07], [209984.0, 9.37775e-08], [209999.0, 1.001775e-07], [210031.0, 1.0319e-07], [210083.0, 1.13715e-07], [210136.0, 1.440825e-07], [210142.0, 1.7149e-07], [210167.0, 2.328575e-07], [210181.0, 3.03575e-07], [210183.0, 3.251e-07], [210187.0, 3.45375e-07], [210200.0, 3.7985e-07], [210221.0, 4.11675e-07], [261897.0, 4.34025e-07], [261905.0, 3.8935e-07], [261906.0, 3.3505e-07], [261912.0, 2.4303e-07], [261949.0, 1.5123e-07], [262003.0, 1.0501e-07], [262029.0, 9.79375e-08], [262085.0, 9.067e-08], [276450.0, 8.71375e-08], [276459.0, 1.114975e-07], [276467.0, 1.338225e-07], [276488.0, 1.73705e-07], [276540.0, 2.467275e-07], [276545.0, 3.445e-07], [276565.0, 3.9985e-07], [276581.0, 5.334e-07], [276589.0, 5.9975e-07], [276590.0, 6.403e-07], [276593.0, 6.7645e-07], [276613.0, 7.35275e-07], [276627.0, 7.40325e-07], [276630.0, 7.429e-07], [276636.0, 7.46425e-07], [276704.0, 7.59e-07], [279320.0, 7.59575e-07], [279327.0, 7.10225e-07], [279386.0, 6.556e-07], [279394.0, 5.12e-07], [279412.0, 3.9355e-07], [279414.0, 2.89325e-07], [279458.0, 1.826725e-07], [279465.0, 1.781675e-07], [293940.0, 1.716075e-07], [294324.0, 0.0005345], [294342.0, 6.19075e-05], [304359.0, 1.68345e-07], [304388.0, 2.61575e-07], [304516.0, 3.2815e-07], [304528.0, 4.74875e-07], [304538.0, 5.57725e-07], [304576.0, 6.445e-07], [304594.0, 6.5965e-07], [304605.0, 6.6665e-07], [304615.0, 6.67675e-07], [313576.0, 6.679e-07], [313645.0, 6.11625e-07], [313648.0, 4.9195e-07], [313691.0, 3.956e-07], [313831.0, 2.270625e-07], [313880.0, 2.054525e-07], [313997.0, 1.86985e-07], [314028.0, 1.591125e-07], [314040.0, 1.537425e-07], [333492.0, 1.494875e-07], [334675.0, 2.458675e-08], [334677.0, 2.486075e-08], [334741.0, 2.90425e-08], [334788.0, 3.455e-08], [334799.0, 4.19375e-08], [334816.0, 6.71375e-08], [334860.0, 9.29325e-08], [334877.0, 1.34935e-07], [334884.0, 1.68915e-07], [334928.0, 2.32205e-07], [334955.0, 2.9955e-07], [335022.0, 3.728e-07], [335058.0, 3.79625e-07], [339659.0, 3.8285e-07], [339765.0, 3.79475e-07], [339781.0, 2.362825e-07], [339790.0, 1.67995e-07], [339798.0, 1.199525e-07], [339823.0, 8.07725e-08], [339836.0, 7.0775e-08], [339875.0, 4.5855e-08], [339901.0, 4.504e-08], [349779.0, 4.346e-08], [349809.0, 2.037825e-07], [349824.0, 8.254e-07], [349842.0, 1.022575e-06], [349858.0, 1.0505e-06], [349916.0, 1.053875e-06], [350008.0, 1.75125e-06], [350020.0, 1.8648e-06], [350034.0, 2.046075e-06], [354808.0, 2.048e-06], [354886.0, 2.047225e-06], [354918.0, 2.0324e-06], [354930.0, 2.025e-06], [354951.0, 2.003175e-06], [354960.0, 1.929775e-06], [354997.0, 1.8035e-06], [355401.0, 1.56035e-06], [355429.0, 1.4872e-06], [355493.0, 1.45135e-06], [355529.0, 1.418275e-06], [355590.0, 1.2437e-06], [355598.0, 1.070675e-06], [355663.0, 9.781e-07], [370842.0, 4.654e-07], [370853.0, 8.6025e-07], [370859.0, 1.53305e-06], [370894.0, 1.99745e-06], [370902.0, 2.13475e-06], [370925.0, 2.351225e-06], [373610.0, 2.382175e-06], [373645.0, 1.7164e-06], [373715.0, 3.654e-07], [378389.0, 8.25225e-08], [380784.0, 2.03445e-06], [380933.0, 1.8337e-06], [381003.0, 5.76575e-07], [400124.0, 3.94575e-08], [402064.0, 1.4447e-05], [402080.0, 1.429275e-05], [402132.0, 1.3893e-05], [402151.0, 5.39725e-06], [402189.0, 1.146225e-06], [402199.0, 7.8465e-07], [402210.0, 5.0005e-07], [402306.0, 3.27075e-07], [402308.0, 3.058e-07], [408018.0, 1.9531e-07], [408032.0, 2.168725e-07], [408033.0, 2.92925e-07], [408045.0, 3.40925e-07], [408056.0, 4.78125e-07], [408063.0, 5.9555e-07], [408071.0, 6.9305e-07], [408072.0, 8.48125e-07], [408144.0, 9.923e-07], [408256.0, 1.19885e-06], [412173.0, 1.20265e-06], [412198.0, 1.09555e-06], [412803.0, 5.75375e-07], [412810.0, 1.69765e-07], [421669.0, 1.837175e-08], [421677.0, 1.85595e-08], [421712.0, 3.783e-08], [421721.0, 1.319225e-07], [421819.0, 2.313125e-07], [421830.0, 1.023975e-06], [424108.0, 1.433775e-06], [424186.0, 1.053225e-06], [424195.0, 7.579e-07], [424199.0, 5.24375e-07], [424232.0, 3.99e-07], [435597.0, 3.11775e-07], [435652.0, 3.11175e-07], [435661.0, 3.08575e-07], [435662.0, 3.04875e-07], [435706.0, 3.03475e-07], [435731.0, 2.95475e-07], [435772.0, 2.8875e-07], [435773.0, 2.58575e-07], [435804.0, 2.45125e-07], [435807.0, 2.2051e-07], [435817.0, 1.867675e-07], [435818.0, 1.616625e-07], [435827.0, 1.47575e-07], [435830.0, 1.10705e-07], [437491.0, 7.8545e-08], [438142.0, 7.69925e-08], [481697.0, 7.636e-08], [481879.0, 7.7245e-08], [481880.0, 1.0541e-07], [481944.0, 1.6833e-07], [481963.0, 2.8225e-07], [482001.0, 3.07275e-07], [482023.0, 3.8785e-07], [500001.0, 4.1605e-07]]
if '__name__':
	main(recom)
